{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleModeDark","style","backgroundColor","toggleModeLight","toggleModeSuccess","toggleModePrimary","toggleModeDanger","toggleModeWarning","toggleModeInfo","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","bgColor","color","disabled","length","newText","toUpperCase","showAlert","lwText","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","Alert","height","alert","role","msg","defaultProps","aboutText","App","setMode","setAlert","setbgColor","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c94194a.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n  return (\r\n\r\n    // <nav className={`navbar navbar-expand-lg navbar-${props.mode === 'light' ? 'light' : 'dark'}  bg-${props.mode}`}>\r\n    //   <div className=\"container-fluid\">\r\n    //     <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    //     <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    //       <span className=\"navbar-toggler-icon\"></span>\r\n    //     </button>\r\n    //     <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    //       <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n    //         <li className=\"nav-item\">\r\n    //           <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">Home</Link>\r\n    //         </li>\r\n    //         <li className=\"nav-item\">\r\n    //           <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n    //         </li>\r\n\r\n    //       </ul>\r\n\r\n    //       <div className={`circle `} >\r\n    //         <div className=\"area\"   onClick={props.toggleModeDark} style={{backgroundColor: \"black\"}}>\r\n    //         </div>\r\n    //       </div>\r\n\r\n    //       <div className={`circle`} >\r\n    //         <div className={`area border-${props.mode === 'light'? \"dark\" : 'light' }`}   onClick={props.toggleModeLight} style={{backgroundColor: \"white\"}}>\r\n    //         </div>\r\n    //       </div>\r\n\r\n\r\n    //       <div className={`circle`} >\r\n    //         <div className=\"area\"   onClick={props.toggleModeSuccess} style={{backgroundColor: \"green\"}}>\r\n    //         </div>\r\n    //       </div>\r\n\r\n    //       <div className={`circle`}>\r\n    //         <div className=\"area\"  onClick={props.toggleModePrimary} style={{backgroundColor: \"blue\"}}>\r\n    //         </div>\r\n    //       </div>\r\n\r\n    //       <div className={`circle`} >\r\n    //         <div className=\"area\"   onClick={props.toggleModeDanger} style={{backgroundColor: \"red\"}}>\r\n    //         </div>\r\n    //       </div>\r\n\r\n    //       <div className={`circle`} >\r\n    //         <div className=\"area\"   onClick={props.toggleModeWarning} style={{backgroundColor: \"yellow\"}}>\r\n    //         </div>\r\n    //       </div>\r\n\r\n    //       <div className={`circle`} >\r\n    //         <div className=\"area\"   onClick={props.toggleModeInfo} style={{backgroundColor: \"skyblue\"}}>\r\n    //         </div>\r\n    //       </div>\r\n\r\n    //     </div>\r\n    //   </div>\r\n    // </nav>\r\n\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode === 'light' ? 'light' : 'dark'}  bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link \" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n\r\n          </ul>\r\n\r\n          <div className={`circle `} >\r\n            <div className=\"area\" onClick={props.toggleModeDark} style={{ backgroundColor: \"black\" }}>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={`circle`} >\r\n            <div className={`area border-${props.mode === 'light' ? \"dark\" : 'light'}`} onClick={props.toggleModeLight} style={{ backgroundColor: \"white\" }}>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className={`circle`} >\r\n            <div className=\"area\" onClick={props.toggleModeSuccess} style={{ backgroundColor: \"green\" }}>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={`circle`}>\r\n            <div className=\"area\" onClick={props.toggleModePrimary} style={{ backgroundColor: \"blue\" }}>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={`circle`} >\r\n            <div className=\"area\" onClick={props.toggleModeDanger} style={{ backgroundColor: \"red\" }}>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={`circle`} >\r\n            <div className=\"area\" onClick={props.toggleModeWarning} style={{ backgroundColor: \"yellow\" }}>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={`circle`} >\r\n            <div className=\"area\" onClick={props.toggleModeInfo} style={{ backgroundColor: \"skyblue\" }}>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </nav>\r\n\r\n  )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: 'About'\r\n\r\n}","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    \r\n\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was click\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert('Connverted to uppercase','success')\r\n    }\r\n\r\n    const handleLwClick = () => {\r\n        // console.log(\"Lowercase was click\" + text);\r\n        let lwText = text.toLowerCase();\r\n        setText(lwText)\r\n        props.showAlert('Connverted to lowercase','success')\r\n\r\n    }\r\n\r\n\r\n    const handleCTClick = () => {\r\n        // console.log(\"On change\");\r\n        let clText = '';\r\n        setText(clText);\r\n        props.showAlert('All text cleared','success')\r\n    }\r\n\r\n\r\n\r\n    // Copy to Clipboard\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert('Copied to clipboard!','success')\r\n    }\r\n\r\n    // Remove Extra Space\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert('Extra Spaces removed','success')\r\n    }\r\n\r\n\r\n\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    // text = \"new Test0\"; // Wrong way to change the state\r\n    // setText(\"New Text\"); // Correct way to change the state\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <h1 className='mb-4'>{props.heading} </h1>\r\n\r\n                <div className=\"mb-3\">\r\n\r\n                    <textarea className={`form-control `} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\" style={{ backgroundColor: props.bgColor, color: props.mode === 'light' ? 'black' : 'white' }}></textarea>\r\n                </div>\r\n                <button  disabled={text.length===0} className={`btn btn-${props.mode} border-${props.mode === \"light\"?'dark':\"light\"} me-2 my-1`} onClick={handleUpClick}>Convert to Uppercase</button>\r\n\r\n                <button  disabled={text.length===0} className={`btn btn-${props.mode} border-${props.mode === \"light\"?'dark':\"light\"} me-2 my-1`} onClick={handleLwClick}>Convert to Lowercase</button>\r\n\r\n                <button disabled={text.length===0} className={`btn btn-${props.mode} border-${props.mode === \"light\"?'dark':\"light\"} me-2 my-1`} onClick={handleCTClick}>Clear Text</button>\r\n                <button disabled={text.length===0}  className={`btn btn-${props.mode} border-${props.mode === \"light\"?'dark':\"light\"} me-2 my-1`} onClick={handleCopy} >Copy</button>\r\n                <button  disabled={text.length===0} className={`btn btn-${props.mode} border-${props.mode === \"light\"?'dark':\"light\"} me-2 my-1`} onClick={handleExtraSpaces}>Remove ExtraSpaces</button>\r\n\r\n\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(/\\s+/).filter((element)=>{return element.length !== 0}).length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(/\\s+/).filter((element)=>{return element.length !== 0}).length} Minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : \"Nothing to preview\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    // const capitalize = (word) =>{\r\n    //     const lower = word.toLowerCase();\r\n    //     return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    // }\r\n    return (\r\n            <div style={{height: '50px'}}>\r\n           {props.alert && <div className={`alert alert-${props.alert.type} rounded-0 alert-dismissible fade show`} role=\"alert\">\r\n                {props.alert.msg}\r\n            </div>}\r\n            </div>\r\n        \r\n    )\r\n}\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\n\n\nfunction App() {\n\n\n  const [mode, setMode] = useState('dark'); // Whether dark mode is enabledd or not\n  const [alert, setAlert] = useState(null)\n  const [bgColor, setbgColor] = useState('#13466e')\n\n\n\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500)\n  }\n\n  const toggleModeLight = () => {\n    if (mode !== 'light') {\n      setMode('light')\n      document.body.style.backgroundColor = \"#f8f9fa\";\n      document.body.style.color = \"black\";\n      showAlert('Light mode has been enabled', 'dark')\n      // document.title = \"TextUtils - Danger Mode\";\n      setbgColor('#f8f9fa');\n    }\n  }\n\n  const toggleModeDark = () => {\n    if (mode !== 'dark') {\n      setMode('dark')\n      document.body.style.backgroundColor = \"#042743\";\n      document.body.style.color = \"white\";\n      showAlert('Dark mode has been enabled', 'light')\n      // document.title = \"TextUtils - Dark Mode\";\n      setbgColor('#13466e');\n    }\n  }\n\n  const toggleModeDanger = () => {\n    if (mode !== 'danger') {\n      setMode('danger')\n      document.body.style.backgroundColor = \"rgb(248, 113, 113)\";\n      document.body.style.color = \"white\";\n      showAlert('Danger mode has been enabled', 'danger')\n      // document.title = \"TextUtils - Danger Mode\";\n      setbgColor('red');\n    }\n    \n  }\n\n  const toggleModeSuccess = () => {\n    if (mode !== 'success') {\n      setMode('success')\n      document.body.style.backgroundColor = \"rgb(103, 233, 103)\";\n      document.body.style.color = \"white\";\n      showAlert('Success mode has been enabled', 'success')\n      // document.title = \"TextUtils - Sucess Mode\";\n      setbgColor('green');\n\n    }\n  \n  }\n\n  const toggleModePrimary = () => {\n    if (mode !== 'primary') {\n      setMode('primary')\n      document.body.style.backgroundColor = \"rgb(99, 149, 241)\";\n      document.body.style.color = \"white\";\n      showAlert('Primary mode has been enabled', 'primary')\n      // document.title = \"TextUtils - Danger Mode\";\n      setbgColor('blue');\n\n    }\n   \n  }\n\n  const toggleModeWarning = () => {\n    if (mode !== 'warning') {\n      setMode('warning')\n      document.body.style.backgroundColor = \"rgb(241, 197, 74)\";\n      document.body.style.color = \"white\";\n      showAlert('Warning mode has been enabled', 'warning')\n      // document.title = \"TextUtils - Danger Mode\";\n      setbgColor('rgb(236, 177, 12)');\n\n    }\n   \n  }\n\n  const toggleModeInfo = () => {\n    if (mode !== 'info') {\n      setMode('info')\n      document.body.style.backgroundColor = \"lightskyblue\";\n      document.body.style.color = \"white\";\n      showAlert('Info mode has been enabled', 'info')\n      // document.title = \"TextUtils - Danger Mode\";\n      setbgColor('lightblue');\n\n    }\n   \n  }\n\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode}  toggleModeLight={toggleModeLight} toggleModeDark={toggleModeDark} toggleModeDanger={toggleModeDanger} toggleModeSuccess={toggleModeSuccess} toggleModePrimary={toggleModePrimary}  toggleModeInfo = {toggleModeInfo} toggleModeWarning={toggleModeWarning}/> \n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} bgColor={bgColor} />\n      </div>\n\n      {/* <Router>\n        <Navbar title=\"TextUtils\" mode={mode}  toggleModeLight={toggleModeLight} toggleModeDark={toggleModeDark} toggleModeDanger={toggleModeDanger} toggleModeSuccess={toggleModeSuccess} toggleModePrimary={toggleModePrimary}  toggleModeInfo = {toggleModeInfo} toggleModeWarning={toggleModeWarning}/> \n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Routes>\n            <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\" Try TextUtils - Word Counter, Character Counter, Remove extra spaces\" mode={mode}  bgColor={bgColor}/>}>\n            </Route>\n            <Route exact path=\"/about\" element={<About mode={mode} />}>\n            </Route>\n          </Routes>\n        </div>\n      </Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}